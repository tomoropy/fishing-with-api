package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/tomoropy/fishing-with-api/domain/entity"
	"github.com/tomoropy/fishing-with-api/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	var user entity.User

	user.UID = uuid.New().String()
	user.Username = input.Username
	user.Email = input.Email
	user.HashedPassword = input.Password
	user.Avater = input.Avater
	user.Header = input.Header
	user.Text = input.Text
	user.CreatedAt = time.Now().Format("0000-00-00 00:00:00")

	createdUser, err := r.MS.CreateUser(ctx, &user)
	if err != nil {
		return nil, err
	}

	return &model.User{
		UID:       createdUser.UID,
		Username:  createdUser.Username,
		Password:  "", // ここでパスワードを返さないようにする
		Email:     createdUser.Email,
		Text:      createdUser.Text,
		Avater:    createdUser.Avater,
		Header:    createdUser.Header,
		CreatedAt: createdUser.CreatedAt,
	}, nil
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, email string, password string) (*model.LoginResponse, error) {
	user, token, err := r.QS.Login(ctx, email, password)
	if err != nil {
		return nil, err
	}

	return &model.LoginResponse{
		User: &model.User{
			UID:       user.UID,
			Username:  user.Username,
			Password:  "", // ここでパスワードを返さないようにする
			Email:     user.Email,
			Text:      user.Text,
			Avater:    user.Avater,
			Header:    user.Header,
			CreatedAt: user.CreatedAt,
		},
		Token: token,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
