package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/tomoropy/fishing-with-api/domain/entity"
	"github.com/tomoropy/fishing-with-api/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	var user entity.User

	user.UID = uuid.New().String()
	user.Username = input.Username
	user.Email = input.Email
	user.HashedPassword = input.Password
	user.Avater = input.Avater
	user.Header = input.Header
	user.Text = input.Text
	user.CreatedAt = time.Now().Format("0000-00-00 00:00:00")

	createdUser, err := r.MS.CreateUser(ctx, &user)
	if err != nil {
		return nil, err
	}

	modelUser := r.P.User(createdUser)

	return modelUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	updatedUser, err := r.MS.UpdateUser(ctx, &entity.User{
		UID:            input.UID,
		Username:       input.User.Username,
		Email:          input.User.Email,
		HashedPassword: input.User.Password,
		Avater:         input.User.Avater,
		Header:         input.User.Header,
		Text:           input.User.Text,
	})
	if err != nil {
		return nil, err
	}
	return r.P.User(updatedUser), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, uid string) (*model.ResponceInfo, error) {
	err := r.MS.DeleteUser(ctx, uid)
	if err != nil {
		return &model.ResponceInfo{
			Message: "削除に失敗しました",
			Status:  500,
		}, err
	}
	return &model.ResponceInfo{
		Message: "削除に成功しました",
		Status:  200,
	}, nil
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, email string, password string) (*model.User, error) {
	user, err := r.QS.Login(ctx, email, password)
	if err != nil {
		return nil, err
	}
	modelUser := r.P.User(user)
	return modelUser, nil
}

// AllUser is the resolver for the allUser field.
func (r *queryResolver) AllUser(ctx context.Context) ([]*model.User, error) {
	users, err := r.QS.ListUsers(ctx)
	if err != nil {
		return nil, err
	}

	var modelUsers []*model.User
	for _, user := range users {
		modelUsers = append(modelUsers, r.P.User(&user))
	}

	return modelUsers, nil
}

// UserByUID is the resolver for the userByUid field.
func (r *queryResolver) UserByUID(ctx context.Context, uid string) (*model.User, error) {
	user, err := r.QS.GetUser(ctx, uid)
	if err != nil {
		return nil, err
	}
	modelUser := r.P.User(user)
	return modelUser, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
